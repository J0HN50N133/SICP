#lang sicp
(define (make-monitor procedure)
  (define calls 0)
  (define (depatch . args)
     (cond ((= (length args) 0)
            (begin (set! calls (+ calls 1))
                   (procedure)))
           ((eq? 'how-many-calls? (car args))
            calls)
           (else (begin (set! calls (+ calls 1))
                        (apply procedure args)))))
  depatch)

(define (square x) (* x x))
(define (add x y z) (+ x y z))
(define (silent) (if (= 1 2) 1))
(define a (make-monitor add))
(define s (make-monitor silent))
;(a 1 2 3)
;(a 1 2 3)
;(a 1 2 3)
;(a 1 2 3)
;(a 1 2 3)
;(a 1 2 3)
;(a 1 2 3)
;(a 'how-many-calls?)

(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s)
(s 'how-many-calls?)
